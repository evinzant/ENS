use serde::{Deserialize, Serialize};
use chrono::{Utc, DateTime};
use std::collections::BTreeMap;
use ed25519_dalek::{Signer, SigningKey, Signature};
use base64::{engine::general_purpose, Engine as _};

#[derive(Debug, Serialize, Deserialize)]
pub struct BatchUpdateRequest {
    pub model_id: String,
    pub version: u32,
    pub state_hash: String,
    pub updated_at: DateTime<Utc>,
    pub weights: BTreeMap<String, f64>,
    pub author: String,
    pub signature: String,
}

impl BatchUpdateRequest {
    /// Generate and sign a new batch update
    pub fn new_signed(
        model_id: &str,
        version: u32,
        weights: BTreeMap<String, f64>,
        signing_key: &SigningKey,
    ) -> Self {
        let updated_at = Utc::now();
        let state_hash = crate::model_hash::compute_model_hash(&weights);
        let signature_bytes = signing_key.sign(state_hash.as_bytes()).to_bytes();
        let signature = general_purpose::STANDARD.encode(signature_bytes);
        let author = general_purpose::STANDARD.encode(signing_key.verifying_key().as_bytes());

        BatchUpdateRequest {
            model_id: model_id.to_string(),
            version,
            state_hash,
            updated_at,
            weights,
            author,
            signature,
        }
    }
}

⸻

Features Included:
	•	BatchUpdateRequest struct with full metadata
	•	new_signed(...) method:
	•	Computes the hash
	•	Signs it using Ed25519
	•	Base64-encodes signature and public key
	•	Uses a BTreeMap<String, f64> for consistent ordering
