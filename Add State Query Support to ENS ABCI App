Implement query Method in ABCI App

Update your ENSApp struct implementation:

use abci::*;

#[async_trait]
impl Application for ENSApp {
    // ... other methods ...

    async fn query(&self, req: RequestQuery) -> ResponseQuery {
        let key = req.data;

        // Key format: "layer:neuron"
        let key_str = String::from_utf8(key.to_vec()).unwrap_or_default();
        let parts: Vec<&str> = key_str.split(':').collect();

        if parts.len() != 2 {
            return ResponseQuery {
                code: 1,
                log: "Invalid key format. Use 'layer:neuron'".to_string(),
                ..Default::default()
            };
        }

        let layer: u32 = parts[0].parse().unwrap_or(0);
        let neuron: u32 = parts[1].parse().unwrap_or(0);

        let model = MODEL_STATE.lock().unwrap();
        let weight = model.weights.get(&(layer, neuron)).copied().unwrap_or(0.0);

        ResponseQuery {
            code: 0,
            value: weight.to_be_bytes().to_vec(), // Float as binary
            log: format!("Weight for [{}:{}] is {}", layer, neuron, weight),
            ..Default::default()
        }
    }
}



⸻

Query It Using Curl

curl "http://localhost:26657/abci_query?data=\"1:4\""

This queries for layer 1, neuron 4.

You’ll get a base64-encoded binary float back:

{
  "result": {
    "response": {
      "code": 0,
      "value": "P3FhODgAAAA=",
      "log": "Weight for [1:4] is 0.131"
    }
  }
}
