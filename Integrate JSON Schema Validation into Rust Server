schemars + serde_json + optional jsonschema crates to:
	•	Define data structures
	•	Generate and optionally validate against JSON Schemas
	•	Prepare for OpenAPI integration

⸻

Add Dependencies in Cargo.toml

[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
schemars = "0.8"
jsonschema = "0.17"

⸻

Annotate and Generate Schemas in Rust

Update struct definitions:

use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, JsonSchema)]
pub struct EncryptedInput {
    pub ciphertext: String,
    pub weight: f64,
}

#[derive(Debug, Serialize, Deserialize, JsonSchema)]
pub struct AccumulateRequest {
    pub inputs: Vec<EncryptedInput>,
}

#[derive(Debug, Serialize, Deserialize, JsonSchema)]
pub struct AccumulateResponse {
    pub result: String,
}

generate schema:

use schemars::schema_for;

let schema = schema_for!(AccumulateRequest);
println!("{}", serde_json::to_string_pretty(&schema).unwrap());

⸻

Optional: Validate Incoming JSON Against Schema

use jsonschema::{JSONSchema};
use serde_json::Value;

let schema_json = serde_json::to_value(schema).unwrap();
let compiled = JSONSchema::compile(&schema_json).unwrap();

let data: Value = serde_json::from_str(&incoming_payload).unwrap();

if let Err(errors) = compiled.validate(&data) {
    for error in errors {
        println!("Validation error: {}", error);
    }
}
